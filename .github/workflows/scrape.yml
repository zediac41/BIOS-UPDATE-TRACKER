# .github/workflows/scrape.yml
name: Scrape BIOS
on:
  workflow_dispatch:
  schedule:
    - cron: "15 5 * * *"   # daily at 05:15 UTC

permissions:
  contents: write           # <- needed to commit docs/data.json

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo layout (sanity check)
        run: |
          pwd
          ls -la
          echo "---- tree (top) ----"
          ls -la src || true
          ls -la docs || true
          test -f boards.yaml && echo "Found boards.yaml" || echo "Missing boards.yaml"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Print versions for debugging
          python -V
          python -c "import sys,platform; print('platform:', platform.platform()); print('cwd:', __import__('os').getcwd())"
          python -c "import bs4, lxml, yaml, requests; print('ok: imports')"

      - name: Quick import test (package mode)
        run: |
          python - <<'PY'
          import importlib
          try:
              import src.scrape as s
              print("OK: import src.scrape")
              print("scrape module file:", s.__file__)
          except Exception as e:
              print("FAIL: import src.scrape ->", type(e).__name__, e)
              raise SystemExit(1)
          PY

      - name: Ensure docs/ exists
        run: mkdir -p docs

      - name: Run scraper (with offline fallback, never fail job)
        id: scrape
        shell: bash
        run: |
          set -x
          # Try real scrape (module mode!)
          if python -m src.scrape ; then
            echo "scrape_status=success" >> "$GITHUB_OUTPUT"
          else
            echo "Real scrape failed with exit code $?. Falling back to offline to force-write docs/data.json"
            python -m src.scrape --offline || true
            echo "scrape_status=offline" >> "$GITHUB_OUTPUT"
          fi
          echo "Top of docs/data.json:"
          head -n 60 docs/data.json || true

      - name: Upload data.json as artifact (debugging)
        uses: actions/upload-artifact@v4
        with:
          name: docs-data-json
          path: docs/data.json
          if-no-files-found: warn

      - name: Commit updated data.json
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/data.json
          git diff --cached --quiet && echo "No changes to commit" || git commit -m "Update BIOS data (${{ steps.scrape.outputs.scrape_status }}) [skip ci]"
          git push

